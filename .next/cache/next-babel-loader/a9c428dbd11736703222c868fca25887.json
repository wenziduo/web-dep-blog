{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport AppMarkdown from '../../public/test.md';\nimport CodeBlock from '../CodeBlock';\nimport HeadingBlock from '../HeadingBlock';\nimport './index.less'; // import Aaa from 'react-markdown'\n// console.log('Aaa', Aaa)\n// See https://github.com/aknuds1/html-to-react#with-custom-processing-instructions\n// for more info on the processing instructions\n// const parseHtml = htmlParser({\n//   isValidNode: node => node.type !== 'script',\n//   processingInstructions: [\n//     /* ... */\n//   ]\n// })\n\nvar MarkdownComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MarkdownComponent, _React$Component);\n\n  function MarkdownComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MarkdownComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MarkdownComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isWindow: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadComponent\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var ReactMarkdown, htmlParser;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return import('react-markdown');\n\n            case 2:\n              ReactMarkdown = _context.sent;\n              _context.next = 5;\n              return import('react-markdown/plugins/html-parser');\n\n            case 5:\n              htmlParser = _context.sent;\n              _this.ReactMarkdown = ReactMarkdown[\"default\"];\n              _this.htmlParser = htmlParser[\"default\"];\n\n              _this.setState({\n                isWindow: true\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    return _this;\n  }\n\n  _createClass(MarkdownComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadComponent();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isWindow = this.state.isWindow;\n      console.log('isWindow', isWindow);\n      var ReactMarkdown = this.ReactMarkdown,\n          htmlParser = this.htmlParser;\n      console.log('ReactMarkdown', ReactMarkdown);\n      return __jsx(\"div\", {\n        className: \"markdown-layout-outer\"\n      }, isWindow && __jsx(ReactMarkdown, {\n        className: \"md-editor-markdown\",\n        source: this.props.dataSouce || null // source={AppMarkdown}\n        ,\n        escapeHtml: false,\n        renderers: {\n          code: CodeBlock,\n          heading: HeadingBlock\n        }\n      }));\n    }\n  }]);\n\n  return MarkdownComponent;\n}(React.Component);\n\nexport default MarkdownComponent;","map":null,"metadata":{},"sourceType":"module"}