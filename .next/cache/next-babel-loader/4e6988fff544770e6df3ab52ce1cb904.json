{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\n\nclass CodeBlock extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isWindow: false\n    });\n\n    _defineProperty(this, \"loadComponent\", async () => {\n      const SyntaxHighlighter = await import('react-syntax-highlighter'); // 设置高亮样式\n\n      const prism = await import('react-syntax-highlighter/dist/esm/styles/prism');\n      const hljs = await import('react-syntax-highlighter/dist/esm/styles/hljs'); // 设置高亮的语言\n\n      const {\n        jsx,\n        javascript\n      } = await import('react-syntax-highlighter/dist/esm/languages/prism'); // 注册要高亮的语法，\n      // 注意：如果不设置打包后供第三方使用是不起作用的\n\n      const {\n        PrismLight\n      } = SyntaxHighlighter;\n      PrismLight.registerLanguage('jsx', jsx);\n      PrismLight.registerLanguage('javascript', javascript);\n      this.SyntaxHighlighter = PrismLight;\n      console.log('prism.coy', prism.coy);\n      this.coy = prism.coy;\n      this.docco = hljs.docco;\n      this.setState({\n        isWindow: true\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadComponent();\n  }\n\n  render() {\n    const {\n      language,\n      value\n    } = this.props;\n    const {\n      SyntaxHighlighter,\n      coy,\n      docco\n    } = this;\n    const {\n      isWindow\n    } = this.state;\n    return __jsx(\"div\", null, isWindow && __jsx(\"figure\", {\n      className: \"highlight\"\n    }, __jsx(SyntaxHighlighter, {\n      language: language,\n      style: _objectSpread({}, coy, {}, docco)\n    }, value)));\n  }\n\n}\n\n_defineProperty(CodeBlock, \"defaultProps\", {\n  language: null\n});\n\nexport default CodeBlock;","map":null,"metadata":{},"sourceType":"module"}